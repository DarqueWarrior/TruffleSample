# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  - main

pool:
  vmImage: ubuntu-latest

stages:
  - stage: Build
    jobs:
      - job: Compile

        container: darquewarrior/ethereum:0.1.4

        steps:
          - script: npm install
            displayName: "Install Truffle"

          - script: npx truffle compile
            displayName: "Compile contracts"

          - script: npx truffle test
            displayName: "Test contracts"

          - task: PublishTestResults@2
            displayName: "Publish contract test results"
            inputs:
              testRunTitle: "Contract"
              testResultsFormat: "JUnit"
              failTaskOnFailedTests: true
              testResultsFiles: "**/TEST-*.xml"

          - task: CopyFiles@2
            displayName: Package tests
            inputs:
              Contents: |
                $(System.DefaultWorkingDirectory)/test/**
                package.json
              TargetFolder: "$(Build.ArtifactStagingDirectory)/tests"

          - task: PublishPipelineArtifact@1
            displayName: Publish tests
            inputs:
              targetPath: "$(Build.ArtifactStagingDirectory)/tests"
              artifact: "tests"
              publishLocation: "pipeline"

          - task: CopyFiles@2
            displayName: Package contracts
            inputs:
              Contents: |
                $(System.DefaultWorkingDirectory)/package.json
                $(System.DefaultWorkingDirectory)/migrations/**
                $(System.DefaultWorkingDirectory)/truffle-config.js
                $(System.DefaultWorkingDirectory)/client/src/contracts/**
              TargetFolder: "$(Build.ArtifactStagingDirectory)/contracts"

          - task: PublishPipelineArtifact@1
            displayName: Publish contracts
            inputs:
              targetPath: "$(Build.ArtifactStagingDirectory)/contracts"
              artifact: "contracts"
              publishLocation: "pipeline"

          - script: npm install
            displayName: "Install client dependencies"
            workingDirectory: $(System.DefaultWorkingDirectory)/client

          - script: npm run build
            displayName: "Build client"
            workingDirectory: $(System.DefaultWorkingDirectory)/client

          - script: CI=true npm test -- --reporters=default --reporters=jest-junit
            displayName: "Test client"
            workingDirectory: $(System.DefaultWorkingDirectory)/client

          - task: PublishTestResults@2
            displayName: "Publish client test results"
            inputs:
              testRunTitle: "Client"
              testResultsFormat: "JUnit"
              failTaskOnFailedTests: true
              testResultsFiles: "**/junit*.xml"

          - task: PublishPipelineArtifact@1
            displayName: Publish client
            inputs:
              targetPath: "$(System.DefaultWorkingDirectory)/client/build"
              artifact: "client"
              publishLocation: "pipeline"

          - task: PublishPipelineArtifact@1
            displayName: Publish API
            inputs:
              targetPath: "$(System.DefaultWorkingDirectory)/api"
              artifact: "api"
              publishLocation: "pipeline"

          - task: CopyFiles@2
            displayName: Package IaC
            inputs:
              Contents: $(System.DefaultWorkingDirectory)/iac/**
              TargetFolder: "$(Build.ArtifactStagingDirectory)"

          - task: PublishPipelineArtifact@1
            displayName: Publish IaC
            inputs:
              targetPath: "$(Build.ArtifactStagingDirectory)/iac"
              artifact: "iac"
              publishLocation: "pipeline"

  - stage: Dev
    dependsOn: Build
    jobs:
      - job: IaC
        container: darquewarrior/ethereum:0.1.4

        steps:
          - checkout: none
          - download: none

          - task: DownloadPipelineArtifact@2
            displayName: Download artifacts

          - script: npm install
            displayName: "Install Truffle"
            workingDirectory: $(Agent.BuildDirectory)/contracts

          - script: "npx truffle migrate --network rinkeby --reset --compile-none"
            displayName: Deploy contracts
            workingDirectory: $(Agent.BuildDirectory)/contracts
            env:
              NEMONIC: $(NEMONIC)
              INFURA_PROJECT_ID: $(INFURA_PROJECT_ID)

          - pwsh: |
              # Load the contract JSON that should have a single network property
              # after the contract migration above
              $contract = Get-Content ./client/src/contracts/SimpleStorage.json | ConvertFrom-Json

              # The networkId is the name of the only property in the networks object
              $networkId = $contract.networks[0] | Get-Member -MemberType NoteProperty | Select-Object -ExpandProperty name

              # Get the address property
              $address = $contract.networks.$networkId.address

              if($address) {
                Write-Host "##[section]Contract address: $address"
              } else {
                Write-Host "##vso[task.logissue type=error]Address not found"
              }

              Write-Host "##vso[task.setvariable variable=contractAddress;isOutput=true]$address"
            displayName: Find contract address
            name: contract
            workingDirectory: $(Agent.BuildDirectory)/contracts

          - task: AzureCLI@2
            name: deploy
            displayName: Deploy SWA
            inputs:
              azureSubscription: "ca-dbrown-demo-test(d3b805bb-2146-42a2-93fd-0b67c338317e)"
              scriptType: "pscore"
              scriptLocation: "scriptPath"
              scriptPath: "$(Agent.BuildDirectory)/iac/deploy.ps1"
              arguments: "-repoUrl $(Build.Repository.Uri) -verbose"
              workingDirectory: "$(Agent.BuildDirectory)/iac"

      - job: Deploy
        dependsOn: IaC
        variables:
          # map the output variable from build stage into this job
          deploymentToken: $[ dependencies.IaC.outputs['deploy.deploymentToken'] ]
          contractAddress: $[ dependencies.IaC.outputs['contract.contractAddress'] ]

        steps:
          - checkout: none
          - download: none

          - task: DownloadPipelineArtifact@2
            displayName: Download artifacts

          - task: AzureStaticWebApp@0
            displayName: Deploy Frontend
            inputs:
              api_location: api
              app_location: client
              skip_app_build: true
              deployment_environment: dev
              workingDirectory: $(Pipeline.Workspace)
              azure_static_web_apps_api_token: $(deploymentToken)

          - task: AzurePowerShell@5
            inputs:
              azureSubscription: 'ca-dbrown-demo-test(d3b805bb-2146-42a2-93fd-0b67c338317e)'
              ScriptType: 'InlineScript'
              Inline: 'New-AzStaticWebAppBuildAppSetting -EnvironmentName dev -Name swa6yprdn2ccalam -ResourceGroupName swa_demo -AppSetting @{"networkAddress"="$(contractAddress)"}'
              azurePowerShellVersion: 'LatestVersion'
              pwsh: true


  - stage: QA
    dependsOn: Dev
    jobs:
      - job: Deploy
        variables:
          # map the output variable from build stage into this job
          deploymentToken: $[ stageDependencies.Dev.IaC.outputs['deploy.deploymentToken'] ]
          contractAddress: $[ stageDependencies.Dev.IaC.outputs['contract.contractAddress'] ]
        steps:
          - script: echo QA

  - stage: Prod
    dependsOn: QA
    jobs:
      - job: Deploy
        steps:
          - script: echo Prod
