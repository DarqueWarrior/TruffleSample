# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

stages:
- stage: Build
  jobs:
  - job: Compile
    steps:
    - task: NodeTool@0
      displayName: 'Use Node.js 16.x'
      inputs:
        versionSpec: '16.x'

    - script: npm install
      displayName: 'Install Truffle'

    - script: npx truffle compile
      displayName: 'Compile contracts'

    - script: npx truffle test
      displayName: 'Test contracts'

    - task: PublishTestResults@2
      displayName: 'Publish contract test results'
      inputs:
        testRunTitle: 'Contract'
        testResultsFormat: 'JUnit'
        failTaskOnFailedTests: true
        testResultsFiles: '**/TEST-*.xml'

    - task: CopyFiles@2
      displayName: Package tests
      inputs:
        Contents: |
          $(System.DefaultWorkingDirectory)/test/**
          package.json
        TargetFolder: '$(Build.ArtifactStagingDirectory)/tests'

    - task: PublishPipelineArtifact@1
      displayName: Publish tests
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/tests'
        artifact: 'tests'
        publishLocation: 'pipeline'

    - task: CopyFiles@2
      displayName: Package contracts
      inputs:
        Contents: |
          $(System.DefaultWorkingDirectory)/package.json
          $(System.DefaultWorkingDirectory)/truffle-config.js
          $(System.DefaultWorkingDirectory)/client/src/contracts/**
        TargetFolder: '$(Build.ArtifactStagingDirectory)/contracts'

    - task: PublishPipelineArtifact@1
      displayName: Publish contracts
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/contracts'
        artifact: 'contracts'
        publishLocation: 'pipeline'

    - script: npm install
      displayName: 'Install client dependencies'
      workingDirectory: $(System.DefaultWorkingDirectory)/client

    - script: npm run build
      displayName: 'Build client'
      workingDirectory: $(System.DefaultWorkingDirectory)/client

    - script: CI=true npm test -- --reporters=default --reporters=jest-junit
      displayName: 'Test client'
      workingDirectory: $(System.DefaultWorkingDirectory)/client

    - task: PublishTestResults@2
      displayName: 'Publish client test results'
      inputs:
        testRunTitle: 'Client'
        testResultsFormat: 'JUnit'
        failTaskOnFailedTests: true
        testResultsFiles: '**/junit*.xml'

    - task: PublishPipelineArtifact@1
      displayName: Publish client
      inputs:
        targetPath: '$(System.DefaultWorkingDirectory)/client/build'
        artifact: 'client'
        publishLocation: 'pipeline'

    - task: CopyFiles@2
      displayName: Package IaC
      inputs:
        Contents: $(System.DefaultWorkingDirectory)/iac/**
        TargetFolder: '$(Build.ArtifactStagingDirectory)'

    - task: PublishPipelineArtifact@1
      displayName: Publish IaC
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/iac'
        artifact: 'iac'
        publishLocation: 'pipeline'

- stage: Dev
  dependsOn: Build
  jobs:
  - job: IaC
    steps:
    - checkout: none
    - download: none

    - task: DownloadPipelineArtifact@2
      displayName: Download artifacts

    - task: NodeTool@0
      displayName: 'Use Node.js 16.x'
      inputs:
        versionSpec: '16.x'

    - script: npm install
      displayName: 'Install Truffle'
      workingDirectory: $(Agent.BuildDirectory)/contracts

    - script: 'npx truffle migrate --network rinkeby --reset'
      displayName: Deploy contracts
      workingDirectory: $(Agent.BuildDirectory)/contracts
      env:
        NEMONIC: $(NEMONIC)
        INFURA_PROJECT_ID: $(INFURA_PROJECT_ID)

    - pwsh: |
        # Load the contract JSON that should have a single network property
        # after the contract migration above
        $contract = Get-Content ./client/src/contracts/SimpleStorage.json | ConvertFrom-Json

        # The networkId is the name of the only property in the networks object
        $networkId = $contract.networks[0] | Get-Member -MemberType NoteProperty | Select-Object -ExpandProperty name

        # Get the address property
        $address = $contract.networks.$networkId.address

        Write-Host $address

        Write-Host "##vso[task.setvariable variable=contractAddress;isOutput=true]$address"
      displayName: Find contract address
      workingDirectory: $(Agent.BuildDirectory)/contracts

    - task: AzureCLI@2
      name: deploy
      displayName: Deploy SWA
      inputs:
        azureSubscription: 'ca-dbrown-demo-test(d3b805bb-2146-42a2-93fd-0b67c338317e)'
        scriptType: 'pscore'
        scriptLocation: 'scriptPath'
        scriptPath: '$(Agent.BuildDirectory)/iac/deploy.ps1'
        arguments: '-repoUrl $(Build.Repository.Uri) -verbose'
        workingDirectory: '$(Agent.BuildDirectory)/iac'

- stage: QA
  dependsOn: Dev
  jobs:
  - job: Deploy
    steps:
    - script: echo QA

- stage: Prod
  dependsOn: QA
  jobs:
  - job: Deploy
    steps:
    - script: echo Prod